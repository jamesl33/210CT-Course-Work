#!/usr/bin/python3

import unittest
from binary_tree import binary_tree
from node import node

class UnitTest(unittest.TestCase):
    def test_insert_root(self):
        tree = binary_tree()
        node1 = node((1, None))
        tree.insert(node1)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, None)

    def test_insert_root_with_one_child(self):
        tree = binary_tree()
        node1 = node((1, None))
        node2 = node((2, None))
        tree.insert(node1)
        tree.insert(node2)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, node2)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, None)

    def test_insert_three(self):
        tree = binary_tree()
        node1 = node((3, None))
        node2 = node((2, None))
        node3 = node((4, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, node2)
        self.assertEqual(node1.right_node, node3)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, None)
        self.assertEqual(node3.parent, node1)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)

    def test_min_right(self):
        tree = binary_tree()
        node1 = node((1, None))
        node2 = node((5, None))
        node3 = node((7, None))
        node4 = node((4, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        tree.insert(node4)
        self.assertEqual(tree.min_right(), node4)

    def test_count_children(self):
        tree = binary_tree()
        node1 = node((1, None))
        node2 = node((5, None))
        node3 = node((7, None))
        node4 = node((4, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        tree.insert(node4)
        self.assertEqual(tree.count_children(node2), 2)
        self.assertEqual(tree.count_children(node1), 1)

    def test_remove_leaf(self):
        tree = binary_tree()
        node1 = node((2, None))
        node2 = node((1, None))
        tree.insert(node1)
        tree.insert(node2)
        self.assertEqual(tree.order(), [node2, node1])
        tree.remove(node2)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, None)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, None)
        self.assertEqual(tree.order(), [node1])

    def test_remove_1_right_child(self):
        tree = binary_tree()
        node1 = node((5, None))
        node2 = node((3, None))
        node3 = node((4, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.left_node, node2)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, node3)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(tree.order(), [node2, node3, node1])
        tree.remove(node2)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.left_node, node3)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node3.parent, node1)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(tree.order(), [node3, node1])

    def test_remove_1_left_child(self):
        tree = binary_tree()
        node1 = node((5, None))
        node2 = node((3, None))
        node3 = node((2, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, node2)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, node3)
        self.assertEqual(node2.right_node, None)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(tree.order(), [node3, node2, node1])
        tree.remove(node2)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, node3)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, None)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, None)
        self.assertEqual(node3.parent, node1)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(tree.order(), [node3, node1])

    def test_remove_2_children(self):
        tree = binary_tree()
        node1 = node((5, None))
        node2 = node((7, None))
        node3 = node((8, None))
        node4 = node((6, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        tree.insert(node4)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, node2)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, node4)
        self.assertEqual(node2.right_node, node3)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node1, node4, node2, node3])
        tree.remove(node2)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, node4)
        self.assertEqual(node2.parent, None)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, None)
        self.assertEqual(node4.parent, node1)
        self.assertEqual(node3.parent, node4)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, node3)
        self.assertEqual(tree.order(), [node1, node4, node3])

    def test_remove_2_children(self):
        tree = binary_tree()
        node1 = node((5, None))
        node2 = node((3, None))
        node3 = node((2, None))
        node4 = node((4, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        tree.insert(node4)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.left_node, node2)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, node3)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node3, node2, node4, node1])
        tree.remove(node2)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.left_node, node4)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, None)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, None)
        self.assertEqual(node4.parent, node1)
        self.assertEqual(node3.parent, node4)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.left_node, node3)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node3, node4, node1])

    def test_remove_2_children(self):
        tree = binary_tree()
        node1 = node((10, None))
        node2 = node((20, None))
        node3 = node((15, None))
        node4 = node((25, None))
        node5 = node((5, None))
        node6 = node((7, None))
        node7 = node((3, None))
        node8 = node((2, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        tree.insert(node4)
        tree.insert(node5)
        tree.insert(node6)
        tree.insert(node7)
        tree.insert(node8)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.left_node, node5)
        self.assertEqual(node1.right_node, node2)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, node3)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(node5.parent, node1)
        self.assertEqual(node5.left_node, node7)
        self.assertEqual(node5.right_node, node6)
        self.assertEqual(node6.parent, node5)
        self.assertEqual(node6.left_node, None)
        self.assertEqual(node6.right_node, None)
        self.assertEqual(node7.parent, node5)
        self.assertEqual(node7.left_node, node8)
        self.assertEqual(node7.right_node, None)
        self.assertEqual(node8.parent, node7)
        self.assertEqual(node8.left_node, None)
        self.assertEqual(node8.right_node, None)
        self.assertEqual(tree.order(), [node8, node7, node5, node6, node1, node3, node2, node4])
        tree.remove(node5)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.left_node, node6)
        self.assertEqual(node1.right_node, node2)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, node3)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(node5.parent, None)
        self.assertEqual(node5.left_node, None)
        self.assertEqual(node5.right_node, None)
        self.assertEqual(node6.parent, node1)
        self.assertEqual(node6.left_node, node7)
        self.assertEqual(node6.right_node, None)
        self.assertEqual(node7.parent, node6)
        self.assertEqual(node7.left_node, node8)
        self.assertEqual(node7.right_node, None)
        self.assertEqual(node8.parent, node7)
        self.assertEqual(node8.left_node, None)
        self.assertEqual(node8.right_node, None)
        self.assertEqual(tree.order(), [node8, node7, node6, node1, node3, node2, node4])

    def test_remove_root_left_child(self):
        tree = binary_tree()
        node1 = node((5, None))
        node2 = node((3, None))
        node3 = node((2, None))
        node4 = node((4, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        tree.insert(node4)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, node2)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, node3)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node3, node2, node4, node1])
        tree.remove(node1)
        self.assertEqual(tree.root, node2)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, None)
        self.assertEqual(node2.left_node, node3)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node3, node2, node4])

    def test_remove_root_right_child(self):
        tree = binary_tree()
        node1 = node((5, None))
        node2 = node((10, None))
        node3 = node((8, None))
        node4 = node((12, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        tree.insert(node4)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, node2)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, node3)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node1, node3, node2, node4])
        tree.remove(node1)
        self.assertEqual(tree.root, node2)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, None)
        self.assertEqual(node2.left_node, node3)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node3, node2, node4])

    def test_remove_root_2_children(self):
        tree = binary_tree()
        node1 = node((5, None))
        node2 = node((10, None))
        node3 = node((4, None))
        node4 = node((12, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        tree.insert(node4)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, node3)
        self.assertEqual(node1.right_node, node2)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node3.parent, node1)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node3, node1, node2, node4])
        tree.remove(node1)
        self.assertEqual(tree.root, node3)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, node3)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node3.parent, None)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, node2)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node3, node2, node4])

    def test_equal_values(self):
        tree = binary_tree()
        node1 = node((1, None))
        node2 = node((1, None))
        node3 = node((1, None))
        node4 = node((1, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        tree.insert(node4)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, node2)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, node3)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, node4)
        self.assertEqual(node4.parent, node3)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node1, node2, node3, node4])
        tree.remove(node4)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, node2)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, node3)
        self.assertEqual(node3.parent, node2)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.parent, None)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node1, node2, node3])

    def test_multiple_removes(self):
        tree = binary_tree()
        node1 = node((5, None))
        node2 = node((10, None))
        node3 = node((4, None))
        node4 = node((12, None))
        tree.insert(node1)
        tree.insert(node2)
        tree.insert(node3)
        tree.insert(node4)
        self.assertEqual(tree.root, node1)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, node3)
        self.assertEqual(node1.right_node, node2)
        self.assertEqual(node2.parent, node1)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node3.parent, node1)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, None)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node3, node1, node2, node4])
        tree.remove(node1)
        self.assertEqual(tree.root, node3)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, node3)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, node4)
        self.assertEqual(node4.parent, node2)
        self.assertEqual(node3.parent, None)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, node2)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node3, node2, node4])
        tree.remove(node2)
        self.assertEqual(tree.root, node3)
        self.assertEqual(node1.parent, None)
        self.assertEqual(node1.left_node, None)
        self.assertEqual(node1.right_node, None)
        self.assertEqual(node2.parent, None)
        self.assertEqual(node2.left_node, None)
        self.assertEqual(node2.right_node, None)
        self.assertEqual(node4.parent, node3)
        self.assertEqual(node3.parent, None)
        self.assertEqual(node3.left_node, None)
        self.assertEqual(node3.right_node, node4)
        self.assertEqual(node4.left_node, None)
        self.assertEqual(node4.right_node, None)
        self.assertEqual(tree.order(), [node3, node4])


if __name__ == '__main__':
  unittest.main()
